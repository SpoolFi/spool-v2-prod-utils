/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type SmartVaultRegistrationFormStruct = {
  assetGroupId: BigNumberish;
  strategies: AddressLike[];
  strategyAllocation: BigNumberish;
  managementFeePct: BigNumberish;
  depositFeePct: BigNumberish;
  performanceFeePct: BigNumberish;
};

export type SmartVaultRegistrationFormStructOutput = [
  assetGroupId: bigint,
  strategies: string[],
  strategyAllocation: bigint,
  managementFeePct: bigint,
  depositFeePct: bigint,
  performanceFeePct: bigint
] & {
  assetGroupId: bigint;
  strategies: string[];
  strategyAllocation: bigint;
  managementFeePct: bigint;
  depositFeePct: bigint;
  performanceFeePct: bigint;
};

export type DepositBagStruct = {
  smartVault: AddressLike;
  assets: BigNumberish[];
  receiver: AddressLike;
  referral: AddressLike;
  doFlush: boolean;
};

export type DepositBagStructOutput = [
  smartVault: string,
  assets: bigint[],
  receiver: string,
  referral: string,
  doFlush: boolean
] & {
  smartVault: string;
  assets: bigint[];
  receiver: string;
  referral: string;
  doFlush: boolean;
};

export type SwapInfoStruct = {
  swapTarget: AddressLike;
  token: AddressLike;
  swapCallData: BytesLike;
};

export type SwapInfoStructOutput = [
  swapTarget: string,
  token: string,
  swapCallData: string
] & { swapTarget: string; token: string; swapCallData: string };

export type ReallocateParamBagStruct = {
  smartVaults: AddressLike[];
  strategies: AddressLike[];
  swapInfo: SwapInfoStruct[][];
  depositSlippages: BigNumberish[][];
  withdrawalSlippages: BigNumberish[][];
  exchangeRateSlippages: [BigNumberish, BigNumberish][];
  validUntil: BigNumberish;
};

export type ReallocateParamBagStructOutput = [
  smartVaults: string[],
  strategies: string[],
  swapInfo: SwapInfoStructOutput[][],
  depositSlippages: bigint[][],
  withdrawalSlippages: bigint[][],
  exchangeRateSlippages: [bigint, bigint][],
  validUntil: bigint
] & {
  smartVaults: string[];
  strategies: string[];
  swapInfo: SwapInfoStructOutput[][];
  depositSlippages: bigint[][];
  withdrawalSlippages: bigint[][];
  exchangeRateSlippages: [bigint, bigint][];
  validUntil: bigint;
};

export type RedeemBagStruct = {
  smartVault: AddressLike;
  shares: BigNumberish;
  nftIds: BigNumberish[];
  nftAmounts: BigNumberish[];
};

export type RedeemBagStructOutput = [
  smartVault: string,
  shares: bigint,
  nftIds: bigint[],
  nftAmounts: bigint[]
] & {
  smartVault: string;
  shares: bigint;
  nftIds: bigint[];
  nftAmounts: bigint[];
};

export interface SmartVaultManagerAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allocations"
      | "assetGroupId"
      | "claimSmartVaultTokens"
      | "claimWithdrawal"
      | "deposit"
      | "depositRatio"
      | "dhwIndexes"
      | "flushSmartVault"
      | "getLatestFlushIndex"
      | "reallocate"
      | "recoverPendingDeposits"
      | "redeem"
      | "redeemFast"
      | "redeemFastView"
      | "redeemFor"
      | "registerSmartVault"
      | "removeStrategyFromVaults"
      | "simulateSync"
      | "simulateSyncWithBurn"
      | "strategies"
      | "syncSmartVault"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "SmartVaultFlushed"
      | "SmartVaultReallocated"
      | "SmartVaultRegistered"
      | "SmartVaultSynced"
      | "StrategyRemovedFromVault"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allocations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assetGroupId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSmartVaultTokens",
    values: [AddressLike, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWithdrawal",
    values: [AddressLike, BigNumberish[], BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [DepositBagStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositRatio",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dhwIndexes",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flushSmartVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestFlushIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reallocate",
    values: [ReallocateParamBagStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverPendingDeposits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [RedeemBagStruct, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFast",
    values: [RedeemBagStruct, BigNumberish[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFastView",
    values: [RedeemBagStruct, BigNumberish[][], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFor",
    values: [RedeemBagStruct, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSmartVault",
    values: [AddressLike, SmartVaultRegistrationFormStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStrategyFromVaults",
    values: [AddressLike, AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateSync",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateSyncWithBurn",
    values: [AddressLike, AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "strategies",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "syncSmartVault",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "allocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetGroupId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSmartVaultTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dhwIndexes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flushSmartVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestFlushIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reallocate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverPendingDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemFast", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemFastView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerSmartVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStrategyFromVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateSync",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateSyncWithBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "syncSmartVault",
    data: BytesLike
  ): Result;
}

export namespace SmartVaultFlushedEvent {
  export type InputTuple = [smartVault: AddressLike, flushIndex: BigNumberish];
  export type OutputTuple = [smartVault: string, flushIndex: bigint];
  export interface OutputObject {
    smartVault: string;
    flushIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SmartVaultReallocatedEvent {
  export type InputTuple = [
    smartVault: AddressLike,
    newAllocations: BigNumberish
  ];
  export type OutputTuple = [smartVault: string, newAllocations: bigint];
  export interface OutputObject {
    smartVault: string;
    newAllocations: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SmartVaultRegisteredEvent {
  export type InputTuple = [
    smartVault: AddressLike,
    registrationForm: SmartVaultRegistrationFormStruct
  ];
  export type OutputTuple = [
    smartVault: string,
    registrationForm: SmartVaultRegistrationFormStructOutput
  ];
  export interface OutputObject {
    smartVault: string;
    registrationForm: SmartVaultRegistrationFormStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SmartVaultSyncedEvent {
  export type InputTuple = [smartVault: AddressLike, flushIndex: BigNumberish];
  export type OutputTuple = [smartVault: string, flushIndex: bigint];
  export interface OutputObject {
    smartVault: string;
    flushIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyRemovedFromVaultEvent {
  export type InputTuple = [strategy: AddressLike, vault: AddressLike];
  export type OutputTuple = [strategy: string, vault: string];
  export interface OutputObject {
    strategy: string;
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SmartVaultManagerAbi extends BaseContract {
  connect(runner?: ContractRunner | null): SmartVaultManagerAbi;
  waitForDeployment(): Promise<this>;

  interface: SmartVaultManagerAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allocations: TypedContractMethod<[smartVault: AddressLike], [bigint], "view">;

  assetGroupId: TypedContractMethod<
    [smartVault: AddressLike],
    [bigint],
    "view"
  >;

  claimSmartVaultTokens: TypedContractMethod<
    [
      smartVault: AddressLike,
      nftIds: BigNumberish[],
      nftAmounts: BigNumberish[]
    ],
    [bigint],
    "nonpayable"
  >;

  claimWithdrawal: TypedContractMethod<
    [
      smartVault: AddressLike,
      nftIds: BigNumberish[],
      nftAmounts: BigNumberish[],
      receiver: AddressLike
    ],
    [[bigint[], bigint]],
    "nonpayable"
  >;

  deposit: TypedContractMethod<[bag: DepositBagStruct], [bigint], "nonpayable">;

  depositRatio: TypedContractMethod<
    [smartVault: AddressLike],
    [bigint[]],
    "view"
  >;

  dhwIndexes: TypedContractMethod<
    [smartVault: AddressLike, flushIndex: BigNumberish],
    [bigint],
    "view"
  >;

  flushSmartVault: TypedContractMethod<
    [smartVault: AddressLike],
    [void],
    "nonpayable"
  >;

  getLatestFlushIndex: TypedContractMethod<
    [smartVault: AddressLike],
    [bigint],
    "view"
  >;

  reallocate: TypedContractMethod<
    [reallocateParams: ReallocateParamBagStruct],
    [void],
    "nonpayable"
  >;

  recoverPendingDeposits: TypedContractMethod<
    [smartVault: AddressLike],
    [void],
    "nonpayable"
  >;

  redeem: TypedContractMethod<
    [bag: RedeemBagStruct, receiver: AddressLike, doFlush: boolean],
    [bigint],
    "nonpayable"
  >;

  redeemFast: TypedContractMethod<
    [bag: RedeemBagStruct, withdrawalSlippages: BigNumberish[][]],
    [bigint[]],
    "nonpayable"
  >;

  redeemFastView: TypedContractMethod<
    [
      bag: RedeemBagStruct,
      withdrawalSlippages: BigNumberish[][],
      redeemer: AddressLike
    ],
    [bigint[]],
    "nonpayable"
  >;

  redeemFor: TypedContractMethod<
    [bag: RedeemBagStruct, owner: AddressLike, doFlush: boolean],
    [bigint],
    "nonpayable"
  >;

  registerSmartVault: TypedContractMethod<
    [
      smartVault: AddressLike,
      registrationForm: SmartVaultRegistrationFormStruct
    ],
    [void],
    "nonpayable"
  >;

  removeStrategyFromVaults: TypedContractMethod<
    [strategy: AddressLike, vaults: AddressLike[], disableStrategy: boolean],
    [void],
    "nonpayable"
  >;

  simulateSync: TypedContractMethod<
    [smartVault: AddressLike],
    [[bigint, bigint, bigint, bigint[]] & { oldTotalSVTs: bigint }],
    "view"
  >;

  simulateSyncWithBurn: TypedContractMethod<
    [smartVault: AddressLike, userAddress: AddressLike, nftIds: BigNumberish[]],
    [bigint],
    "view"
  >;

  strategies: TypedContractMethod<
    [smartVault: AddressLike],
    [string[]],
    "view"
  >;

  syncSmartVault: TypedContractMethod<
    [smartVault: AddressLike, revertIfError: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allocations"
  ): TypedContractMethod<[smartVault: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "assetGroupId"
  ): TypedContractMethod<[smartVault: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimSmartVaultTokens"
  ): TypedContractMethod<
    [
      smartVault: AddressLike,
      nftIds: BigNumberish[],
      nftAmounts: BigNumberish[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimWithdrawal"
  ): TypedContractMethod<
    [
      smartVault: AddressLike,
      nftIds: BigNumberish[],
      nftAmounts: BigNumberish[],
      receiver: AddressLike
    ],
    [[bigint[], bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[bag: DepositBagStruct], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "depositRatio"
  ): TypedContractMethod<[smartVault: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "dhwIndexes"
  ): TypedContractMethod<
    [smartVault: AddressLike, flushIndex: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "flushSmartVault"
  ): TypedContractMethod<[smartVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getLatestFlushIndex"
  ): TypedContractMethod<[smartVault: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "reallocate"
  ): TypedContractMethod<
    [reallocateParams: ReallocateParamBagStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recoverPendingDeposits"
  ): TypedContractMethod<[smartVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [bag: RedeemBagStruct, receiver: AddressLike, doFlush: boolean],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemFast"
  ): TypedContractMethod<
    [bag: RedeemBagStruct, withdrawalSlippages: BigNumberish[][]],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemFastView"
  ): TypedContractMethod<
    [
      bag: RedeemBagStruct,
      withdrawalSlippages: BigNumberish[][],
      redeemer: AddressLike
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemFor"
  ): TypedContractMethod<
    [bag: RedeemBagStruct, owner: AddressLike, doFlush: boolean],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerSmartVault"
  ): TypedContractMethod<
    [
      smartVault: AddressLike,
      registrationForm: SmartVaultRegistrationFormStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeStrategyFromVaults"
  ): TypedContractMethod<
    [strategy: AddressLike, vaults: AddressLike[], disableStrategy: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "simulateSync"
  ): TypedContractMethod<
    [smartVault: AddressLike],
    [[bigint, bigint, bigint, bigint[]] & { oldTotalSVTs: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "simulateSyncWithBurn"
  ): TypedContractMethod<
    [smartVault: AddressLike, userAddress: AddressLike, nftIds: BigNumberish[]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "strategies"
  ): TypedContractMethod<[smartVault: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "syncSmartVault"
  ): TypedContractMethod<
    [smartVault: AddressLike, revertIfError: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "SmartVaultFlushed"
  ): TypedContractEvent<
    SmartVaultFlushedEvent.InputTuple,
    SmartVaultFlushedEvent.OutputTuple,
    SmartVaultFlushedEvent.OutputObject
  >;
  getEvent(
    key: "SmartVaultReallocated"
  ): TypedContractEvent<
    SmartVaultReallocatedEvent.InputTuple,
    SmartVaultReallocatedEvent.OutputTuple,
    SmartVaultReallocatedEvent.OutputObject
  >;
  getEvent(
    key: "SmartVaultRegistered"
  ): TypedContractEvent<
    SmartVaultRegisteredEvent.InputTuple,
    SmartVaultRegisteredEvent.OutputTuple,
    SmartVaultRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "SmartVaultSynced"
  ): TypedContractEvent<
    SmartVaultSyncedEvent.InputTuple,
    SmartVaultSyncedEvent.OutputTuple,
    SmartVaultSyncedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyRemovedFromVault"
  ): TypedContractEvent<
    StrategyRemovedFromVaultEvent.InputTuple,
    StrategyRemovedFromVaultEvent.OutputTuple,
    StrategyRemovedFromVaultEvent.OutputObject
  >;

  filters: {
    "SmartVaultFlushed(address,uint256)": TypedContractEvent<
      SmartVaultFlushedEvent.InputTuple,
      SmartVaultFlushedEvent.OutputTuple,
      SmartVaultFlushedEvent.OutputObject
    >;
    SmartVaultFlushed: TypedContractEvent<
      SmartVaultFlushedEvent.InputTuple,
      SmartVaultFlushedEvent.OutputTuple,
      SmartVaultFlushedEvent.OutputObject
    >;

    "SmartVaultReallocated(address,uint256)": TypedContractEvent<
      SmartVaultReallocatedEvent.InputTuple,
      SmartVaultReallocatedEvent.OutputTuple,
      SmartVaultReallocatedEvent.OutputObject
    >;
    SmartVaultReallocated: TypedContractEvent<
      SmartVaultReallocatedEvent.InputTuple,
      SmartVaultReallocatedEvent.OutputTuple,
      SmartVaultReallocatedEvent.OutputObject
    >;

    "SmartVaultRegistered(address,tuple)": TypedContractEvent<
      SmartVaultRegisteredEvent.InputTuple,
      SmartVaultRegisteredEvent.OutputTuple,
      SmartVaultRegisteredEvent.OutputObject
    >;
    SmartVaultRegistered: TypedContractEvent<
      SmartVaultRegisteredEvent.InputTuple,
      SmartVaultRegisteredEvent.OutputTuple,
      SmartVaultRegisteredEvent.OutputObject
    >;

    "SmartVaultSynced(address,uint256)": TypedContractEvent<
      SmartVaultSyncedEvent.InputTuple,
      SmartVaultSyncedEvent.OutputTuple,
      SmartVaultSyncedEvent.OutputObject
    >;
    SmartVaultSynced: TypedContractEvent<
      SmartVaultSyncedEvent.InputTuple,
      SmartVaultSyncedEvent.OutputTuple,
      SmartVaultSyncedEvent.OutputObject
    >;

    "StrategyRemovedFromVault(address,address)": TypedContractEvent<
      StrategyRemovedFromVaultEvent.InputTuple,
      StrategyRemovedFromVaultEvent.OutputTuple,
      StrategyRemovedFromVaultEvent.OutputObject
    >;
    StrategyRemovedFromVault: TypedContractEvent<
      StrategyRemovedFromVaultEvent.InputTuple,
      StrategyRemovedFromVaultEvent.OutputTuple,
      StrategyRemovedFromVaultEvent.OutputObject
    >;
  };
}
