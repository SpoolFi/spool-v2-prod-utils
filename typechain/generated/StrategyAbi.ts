/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type SwapInfoStruct = {
  swapTarget: AddressLike;
  token: AddressLike;
  swapCallData: BytesLike;
};

export type SwapInfoStructOutput = [
  swapTarget: string,
  token: string,
  swapCallData: string
] & { swapTarget: string; token: string; swapCallData: string };

export type PlatformFeesStruct = {
  ecosystemFeeReceiver: AddressLike;
  ecosystemFeePct: BigNumberish;
  treasuryFeeReceiver: AddressLike;
  treasuryFeePct: BigNumberish;
};

export type PlatformFeesStructOutput = [
  ecosystemFeeReceiver: string,
  ecosystemFeePct: bigint,
  treasuryFeeReceiver: string,
  treasuryFeePct: bigint
] & {
  ecosystemFeeReceiver: string;
  ecosystemFeePct: bigint;
  treasuryFeeReceiver: string;
  treasuryFeePct: bigint;
};

export type StrategyDhwParameterBagStruct = {
  swapInfo: SwapInfoStruct[];
  compoundSwapInfo: SwapInfoStruct[];
  slippages: BigNumberish[];
  assetGroup: AddressLike[];
  exchangeRates: BigNumberish[];
  withdrawnShares: BigNumberish;
  masterWallet: AddressLike;
  priceFeedManager: AddressLike;
  baseYield: BigNumberish;
  platformFees: PlatformFeesStruct;
};

export type StrategyDhwParameterBagStructOutput = [
  swapInfo: SwapInfoStructOutput[],
  compoundSwapInfo: SwapInfoStructOutput[],
  slippages: bigint[],
  assetGroup: string[],
  exchangeRates: bigint[],
  withdrawnShares: bigint,
  masterWallet: string,
  priceFeedManager: string,
  baseYield: bigint,
  platformFees: PlatformFeesStructOutput
] & {
  swapInfo: SwapInfoStructOutput[];
  compoundSwapInfo: SwapInfoStructOutput[];
  slippages: bigint[];
  assetGroup: string[];
  exchangeRates: bigint[];
  withdrawnShares: bigint;
  masterWallet: string;
  priceFeedManager: string;
  baseYield: bigint;
  platformFees: PlatformFeesStructOutput;
};

export type DhwInfoStruct = {
  sharesMinted: BigNumberish;
  assetsWithdrawn: BigNumberish[];
  yieldPercentage: BigNumberish;
  valueAtDhw: BigNumberish;
  totalSstsAtDhw: BigNumberish;
};

export type DhwInfoStructOutput = [
  sharesMinted: bigint,
  assetsWithdrawn: bigint[],
  yieldPercentage: bigint,
  valueAtDhw: bigint,
  totalSstsAtDhw: bigint
] & {
  sharesMinted: bigint;
  assetsWithdrawn: bigint[];
  yieldPercentage: bigint;
  valueAtDhw: bigint;
  totalSstsAtDhw: bigint;
};

export interface StrategyAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "assetGroupId"
      | "assetRatio"
      | "assets"
      | "balanceOf"
      | "beforeDepositCheck"
      | "beforeRedeemalCheck"
      | "claimShares"
      | "decimals"
      | "decreaseAllowance"
      | "depositFast"
      | "doHardWork"
      | "emergencyWithdraw"
      | "getProtocolRewards"
      | "getUnderlyingAssetAmounts"
      | "getUsdWorth"
      | "increaseAllowance"
      | "name"
      | "redeemFast"
      | "redeemShares"
      | "releaseShares"
      | "strategyName"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "BeforeDepositCheckSlippages"
      | "BeforeRedeemalCheckSlippages"
      | "Deposited"
      | "Initialized"
      | "PlatformFeesCollected"
      | "Slippages"
      | "Transfer"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetGroupId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "assets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeDepositCheck",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeRedeemalCheck",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimShares",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFast",
    values: [
      AddressLike[],
      BigNumberish[],
      AddressLike,
      BigNumberish[],
      SwapInfoStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "doHardWork",
    values: [StrategyDhwParameterBagStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingAssetAmounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUsdWorth",
    values: [BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemFast",
    values: [BigNumberish, AddressLike, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemShares",
    values: [BigNumberish, AddressLike, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseShares",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyName",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetGroupId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetRatio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beforeDepositCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeRedeemalCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "doHardWork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingAssetAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsdWorth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemFast", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeforeDepositCheckSlippagesEvent {
  export type InputTuple = [amounts: BigNumberish[]];
  export type OutputTuple = [amounts: bigint[]];
  export interface OutputObject {
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeforeRedeemalCheckSlippagesEvent {
  export type InputTuple = [ssts: BigNumberish];
  export type OutputTuple = [ssts: bigint];
  export interface OutputObject {
    ssts: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    mintedShares: BigNumberish,
    usdWorthDeposited: BigNumberish,
    assetsBeforeSwap: BigNumberish[],
    assetsDeposited: BigNumberish[]
  ];
  export type OutputTuple = [
    mintedShares: bigint,
    usdWorthDeposited: bigint,
    assetsBeforeSwap: bigint[],
    assetsDeposited: bigint[]
  ];
  export interface OutputObject {
    mintedShares: bigint;
    usdWorthDeposited: bigint;
    assetsBeforeSwap: bigint[];
    assetsDeposited: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFeesCollectedEvent {
  export type InputTuple = [strategy: AddressLike, sharesMinted: BigNumberish];
  export type OutputTuple = [strategy: string, sharesMinted: bigint];
  export interface OutputObject {
    strategy: string;
    sharesMinted: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlippagesEvent {
  export type InputTuple = [
    isDeposit: boolean,
    slippage: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    isDeposit: boolean,
    slippage: bigint,
    data: string
  ];
  export interface OutputObject {
    isDeposit: boolean;
    slippage: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    withdrawnShares: BigNumberish,
    usdWorthWithdrawn: BigNumberish,
    withdrawnAssets: BigNumberish[]
  ];
  export type OutputTuple = [
    withdrawnShares: bigint,
    usdWorthWithdrawn: bigint,
    withdrawnAssets: bigint[]
  ];
  export interface OutputObject {
    withdrawnShares: bigint;
    usdWorthWithdrawn: bigint;
    withdrawnAssets: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StrategyAbi extends BaseContract {
  connect(runner?: ContractRunner | null): StrategyAbi;
  waitForDeployment(): Promise<this>;

  interface: StrategyAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  assetGroupId: TypedContractMethod<[], [bigint], "view">;

  assetRatio: TypedContractMethod<[], [bigint[]], "view">;

  assets: TypedContractMethod<[], [string[]], "view">;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  beforeDepositCheck: TypedContractMethod<
    [amounts: BigNumberish[], slippages: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  beforeRedeemalCheck: TypedContractMethod<
    [ssts: BigNumberish, slippages: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  claimShares: TypedContractMethod<
    [smartVault: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  depositFast: TypedContractMethod<
    [
      assetGroup: AddressLike[],
      exchangeRates: BigNumberish[],
      priceFeedManager: AddressLike,
      slippages: BigNumberish[],
      swapInfo: SwapInfoStruct[]
    ],
    [bigint],
    "nonpayable"
  >;

  doHardWork: TypedContractMethod<
    [dhwParams: StrategyDhwParameterBagStruct],
    [DhwInfoStructOutput],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [slippages: BigNumberish[], recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getProtocolRewards: TypedContractMethod<
    [],
    [[string[], bigint[]]],
    "nonpayable"
  >;

  getUnderlyingAssetAmounts: TypedContractMethod<[], [bigint[]], "view">;

  getUsdWorth: TypedContractMethod<
    [exchangeRates: BigNumberish[], priceFeedManager: AddressLike],
    [bigint],
    "nonpayable"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  redeemFast: TypedContractMethod<
    [
      shares: BigNumberish,
      masterWallet: AddressLike,
      assetGroup: AddressLike[],
      slippages: BigNumberish[]
    ],
    [bigint[]],
    "nonpayable"
  >;

  redeemShares: TypedContractMethod<
    [
      shares: BigNumberish,
      redeemer: AddressLike,
      assetGroup: AddressLike[],
      slippages: BigNumberish[]
    ],
    [bigint[]],
    "nonpayable"
  >;

  releaseShares: TypedContractMethod<
    [smartVault: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  strategyName: TypedContractMethod<[], [string], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assetGroupId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "assetRatio"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "assets"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "beforeDepositCheck"
  ): TypedContractMethod<
    [amounts: BigNumberish[], slippages: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeRedeemalCheck"
  ): TypedContractMethod<
    [ssts: BigNumberish, slippages: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimShares"
  ): TypedContractMethod<
    [smartVault: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositFast"
  ): TypedContractMethod<
    [
      assetGroup: AddressLike[],
      exchangeRates: BigNumberish[],
      priceFeedManager: AddressLike,
      slippages: BigNumberish[],
      swapInfo: SwapInfoStruct[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "doHardWork"
  ): TypedContractMethod<
    [dhwParams: StrategyDhwParameterBagStruct],
    [DhwInfoStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [slippages: BigNumberish[], recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getProtocolRewards"
  ): TypedContractMethod<[], [[string[], bigint[]]], "nonpayable">;
  getFunction(
    nameOrSignature: "getUnderlyingAssetAmounts"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUsdWorth"
  ): TypedContractMethod<
    [exchangeRates: BigNumberish[], priceFeedManager: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redeemFast"
  ): TypedContractMethod<
    [
      shares: BigNumberish,
      masterWallet: AddressLike,
      assetGroup: AddressLike[],
      slippages: BigNumberish[]
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemShares"
  ): TypedContractMethod<
    [
      shares: BigNumberish,
      redeemer: AddressLike,
      assetGroup: AddressLike[],
      slippages: BigNumberish[]
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "releaseShares"
  ): TypedContractMethod<
    [smartVault: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "strategyName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "BeforeDepositCheckSlippages"
  ): TypedContractEvent<
    BeforeDepositCheckSlippagesEvent.InputTuple,
    BeforeDepositCheckSlippagesEvent.OutputTuple,
    BeforeDepositCheckSlippagesEvent.OutputObject
  >;
  getEvent(
    key: "BeforeRedeemalCheckSlippages"
  ): TypedContractEvent<
    BeforeRedeemalCheckSlippagesEvent.InputTuple,
    BeforeRedeemalCheckSlippagesEvent.OutputTuple,
    BeforeRedeemalCheckSlippagesEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFeesCollected"
  ): TypedContractEvent<
    PlatformFeesCollectedEvent.InputTuple,
    PlatformFeesCollectedEvent.OutputTuple,
    PlatformFeesCollectedEvent.OutputObject
  >;
  getEvent(
    key: "Slippages"
  ): TypedContractEvent<
    SlippagesEvent.InputTuple,
    SlippagesEvent.OutputTuple,
    SlippagesEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "BeforeDepositCheckSlippages(uint256[])": TypedContractEvent<
      BeforeDepositCheckSlippagesEvent.InputTuple,
      BeforeDepositCheckSlippagesEvent.OutputTuple,
      BeforeDepositCheckSlippagesEvent.OutputObject
    >;
    BeforeDepositCheckSlippages: TypedContractEvent<
      BeforeDepositCheckSlippagesEvent.InputTuple,
      BeforeDepositCheckSlippagesEvent.OutputTuple,
      BeforeDepositCheckSlippagesEvent.OutputObject
    >;

    "BeforeRedeemalCheckSlippages(uint256)": TypedContractEvent<
      BeforeRedeemalCheckSlippagesEvent.InputTuple,
      BeforeRedeemalCheckSlippagesEvent.OutputTuple,
      BeforeRedeemalCheckSlippagesEvent.OutputObject
    >;
    BeforeRedeemalCheckSlippages: TypedContractEvent<
      BeforeRedeemalCheckSlippagesEvent.InputTuple,
      BeforeRedeemalCheckSlippagesEvent.OutputTuple,
      BeforeRedeemalCheckSlippagesEvent.OutputObject
    >;

    "Deposited(uint256,uint256,uint256[],uint256[])": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "PlatformFeesCollected(address,uint256)": TypedContractEvent<
      PlatformFeesCollectedEvent.InputTuple,
      PlatformFeesCollectedEvent.OutputTuple,
      PlatformFeesCollectedEvent.OutputObject
    >;
    PlatformFeesCollected: TypedContractEvent<
      PlatformFeesCollectedEvent.InputTuple,
      PlatformFeesCollectedEvent.OutputTuple,
      PlatformFeesCollectedEvent.OutputObject
    >;

    "Slippages(bool,uint256,bytes)": TypedContractEvent<
      SlippagesEvent.InputTuple,
      SlippagesEvent.OutputTuple,
      SlippagesEvent.OutputObject
    >;
    Slippages: TypedContractEvent<
      SlippagesEvent.InputTuple,
      SlippagesEvent.OutputTuple,
      SlippagesEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Withdrawn(uint256,uint256,uint256[])": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
